AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Complete AWS network architecture with VPC, NAT Gateway, EC2 Instance Connect Endpoint and 3 EC2 instances

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: Main VPC CIDR block

  PingCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: Allowed CIDR for incoming pings (ICMP)

  Environment:
    Type: String
    Default: demo
    Description: Environment tag value
    
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    Description: Latest Amazon Linux 2 AMI from SSM Parameter Store
    
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type

Resources:
  S3ReadAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      RoleName: !Sub "${AWS::StackName}-S3ReadAccessRole"
      Tags:
        - Key: Name
          Value: s3-read-access-role
        - Key: Environment
          Value: !Ref Environment
          
  S3ReadAccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-S3ReadAccessProfile"
      Roles:
        - !Ref S3ReadAccessRole
          
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: vpc-connectivity-demo
        - Key: Environment
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw-connectivity-demo
        - Key: Environment
          Value: !Ref Environment

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 256, 8]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: public-subnet
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 256, 8]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: private-subnet-1
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidr, 256, 8]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: private-subnet-2
        - Key: Environment
          Value: !Ref Environment

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-rt
        - Key: Environment
          Value: !Ref Environment

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: nat-eip
        - Key: Environment
          Value: !Ref Environment

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: nat-gateway
        - Key: Environment
          Value: !Ref Environment

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-rt-1-with-nat
        - Key: Environment
          Value: !Ref Environment

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateRouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-rt-2-no-internet
        - Key: Environment
          Value: !Ref Environment

  PrivateRouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  SGICMP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ICMP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref PingCidr
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-icmp
        - Key: Environment
          Value: !Ref Environment

  SGSSHEIC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 Instance Connect Endpoint with outbound SSH to VPC only
      VpcId: !Ref VPC
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: sg-ssh-eic
        - Key: Environment
          Value: !Ref Environment

  SGSSHEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from VPC and EIC endpoint
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SGSSHEIC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-ssh-ec2
        - Key: Environment
          Value: !Ref Environment

  EC2ConnectEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds: [!Ref SGSSHEIC]
      PreserveClientIp: true
      Tags:
        - Key: Name
          Value: eic-endpoint
        - Key: Environment
          Value: !Ref Environment
          
  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "${AWS::StackName}-key"
      Tags:
        - Key: Name
          Value: connectivity-demo-key
        - Key: Environment
          Value: !Ref Environment

  PublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref EC2KeyPair
      SubnetId: !Ref PublicSubnet
      # IamInstanceProfile: !Ref S3ReadAccessInstanceProfile
      SecurityGroupIds:
        - !Ref SGICMP
        - !Ref SGSSHEC2
      Tags:
        - Key: Name
          Value: public-instance
        - Key: Environment
          Value: !Ref Environment
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Public instance with direct internet access" > /home/ec2-user/instance-info.txt
          
  PrivateInstanceWithNat:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref EC2KeyPair
      SubnetId: !Ref PrivateSubnet1
      # IamInstanceProfile: !Ref S3ReadAccessInstanceProfile
      SecurityGroupIds:
        - !Ref SGICMP
        - !Ref SGSSHEC2
      Tags:
        - Key: Name
          Value: private-instance-with-nat
        - Key: Environment
          Value: !Ref Environment
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Private instance with NAT Gateway internet access" > /home/ec2-user/instance-info.txt
          
  IsolatedPrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref EC2KeyPair
      SubnetId: !Ref PrivateSubnet2
      # IamInstanceProfile: !Ref S3ReadAccessInstanceProfile
      SecurityGroupIds:
        - !Ref SGICMP
        - !Ref SGSSHEC2
      Tags:
        - Key: Name
          Value: isolated-private-instance
        - Key: Environment
          Value: !Ref Environment
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Isolated private instance with no internet access" > /home/ec2-user/instance-info.txt

Outputs:
  S3ReadAccessRoleArn:
    Description: S3 Read Access Role ARN
    Value: !GetAtt S3ReadAccessRole.Arn
    
  VpcId:
    Description: VPC ID
    Value: !Ref VPC

  PublicSubnet:
    Description: Public Subnet
    Value: !Ref PublicSubnet

  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2

  EC2ConnectEndpointId:
    Description: EC2 Instance Connect Endpoint ID
    Value: !Ref EC2ConnectEndpoint

  NatGatewayId:
    Description: NAT Gateway ID
    Value: !Ref NATGateway
    
  PublicInstanceId:
    Description: Public Instance ID
    Value: !Ref PublicInstance
    
  PrivateInstanceWithNatId:
    Description: Private Instance with NAT ID
    Value: !Ref PrivateInstanceWithNat
    
  IsolatedPrivateInstanceId:
    Description: Isolated Private Instance ID
    Value: !Ref IsolatedPrivateInstance
    
  KeyPairId:
    Description: Key Pair ID
    Value: !Ref EC2KeyPair
    
  KeyPairName:
    Description: Key Pair Name
    Value: !GetAtt EC2KeyPair.KeyPairId
    
#  PrivateKey:
#    Description: Private key for SSH access (save this securely)
#    Value: !GetAtt EC2KeyPair.PrivateKey